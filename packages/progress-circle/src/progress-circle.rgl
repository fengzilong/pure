<template>
	<div class="pure-progress-circle" style="width: { size }px;height: { size }px;">
		<svg viewBox="0 0 100 100">
			<path
				class="pure-progress-circle__track"
				d="{ d }"
				stroke-width="{ relativeStrokeWidth }"
				fill="none"
			></path>
			<path
				class="pure-progress-circle__stroker"
				d="{ d }"
				stroke-linecap="round"
				stroke-width="{ relativeStrokeWidth }"
				fill="none"
				style="{ circleStyle }"
			></path>
		</svg>

		<div class="pure-progress-circle__text">
			{#if showPercentageText}
				{ percentageText }
			{#else}
				{#inc this.$body}
			{/if}
		</div>
	</div>
</template>

<script>
	export default {
		computed: {
			relativeStrokeWidth() {
				return ( this.data.strokeWidth / this.data.size * 100 ).toFixed( 1 );
			},
			d() {
				const relativeStrokeWidth = this.$get( 'relativeStrokeWidth' );
				const radius = parseInt( 50 - ( relativeStrokeWidth / 2 ), 10 );

				return `M 50 50 m 0 -${ radius } a ${ radius } ${ radius } 0 1 1 0 ${ radius * 2 } a ${ radius } ${ radius } 0 1 1 0 -${ radius * 2 }`;
			},
			perimeter() {
				const relativeStrokeWidth = this.$get( 'relativeStrokeWidth' );
				const radius = parseInt( 50 - ( relativeStrokeWidth / 2 ), 10 );
				return 2 * Math.PI * radius;
			},
			circleStyle() {
				if ( typeof this.data.percentage === 'undefined' ) {
					return '';
				}

				const perimeter = this.$get( 'perimeter' );
				const percentage = Math.min( 100, Math.max( 0, this.data.percentage ) );
				return `
					stroke-dasharray: ${ perimeter }px, ${ perimeter }px;
					stroke-dashoffset: ${ ( 1 - ( percentage / 100 ) ) * perimeter }px;
					transition: stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease
				`;
			},
			percentageText() {
				if ( typeof this.data.percentage === 'undefined' ) {
					return '';
				}

				const percentage = Math.min( 100, Math.max( 0, this.data.percentage ) );

				return percentage + '%';
			},
		},
		config() {
			this.data.strokeWidth = this.data.strokeWidth ? Number( this.data.strokeWidth ) : 8;
			this.data.size = this.data.size ? Number( this.data.size ) : 150;
			this.data.showPercentageText = typeof this.data.showPercentageText === 'undefined' ? true : Boolean( this.data.showPercentageText );
		},
	};
</script>
