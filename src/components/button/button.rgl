<template>
	<button ref="b" class="r-button { primary ? 'r-button-primary' : 'r-button-basic' } { sm ? 'r-button-sm' : '' } { disabled ? 'r-button-disabled' : '' }" on-mousedown="{ this.onMouseDown( $event ) }" on-mouseup="{ this.onMouseUp( $event ) }">
		<div
			class="r-button-wave  { pressed ? 'pressed' : 'r-button-wave-hidden' }"
			style="width: { waveWidth }px;height: { waveHeight }px;top: { waveTop }px;left: { waveLeft }px;"
			ref="w"
		></div>
		<div class="r-button-text">
			{#inc this.$body}
		</div>
	</button>
</template>

<script>
	const rAF = (function (w) {
		let raf = w.requestAnimationFrame || w.mozRequestAnimationFrame || w.webkitRequestAnimationFrame

		if (!raf || /iP(ad|hone|od).*OS 6/.test(w.navigator.userAgent)) {
			let lastTime = 0

			raf = function (cb) {
				let nowtime = Date.now(), timeout = Math.max(16 - (nowtime - lastTime), 0)
				setTimeout(function () { cb(lastTime = nowtime + timeout) }, timeout)
			}
		}
		return raf;
	})(window || {});

	export default {
		name: 'Button',
		config() {
			this.data.ripple = this.data.ripple !== false;
		},
		init( data ) {
			const handleAnimationEnd = () => {
				if( this.data.pressed !== false ) {
					this.data.pressed = false;
					this.$update();
				}
			}

			this.$refs.w.addEventListener( 'webkitAnimationEnd', handleAnimationEnd, false );

			this.$on('$destroy', () => {
				this.$refs.w.removeEventListener( 'webkitAnimationEnd', handleAnimationEnd, false );
			});
		},
		onMouseDown() {
		},
		onMouseUp( e ) {
			if( this.data.disabled ) {
				return;
			}

			this.$emit( 'click' );

			if( !this.data.ripple ) {
				return;
			}

			const target = this.$refs.b;
			const pageX = e.pageX;
			const pageY = e.pageY;
			const scrollY = window.scrollY;

			const rect = target.getBoundingClientRect();
			const top = rect.top;
			const left = rect.left;
			const width = rect.width;

			const offsetX = pageX - left;
			const offsetY = pageY - top - scrollY;

			this.data.waveTop = offsetY - width / 2;
			this.data.waveLeft = offsetX - width / 2;
			this.data.waveWidth = width;
			this.data.waveHeight = width;

			this.data.pressed = false;
			this.$update();

			rAF(() => {
				this.data.pressed = true;
				this.$update();
			});
		}
	};
</script>

<style lang="less" scoped>
	@import '../../variable.less';

	@button-color: @primary-color;

	@keyframes r-button-ripple {
		from {
			opacity: 1;
			-webkit-transform: scale(0);
			transform: scale(0)
		}

		to {
			opacity: 0;
			-webkit-transform: scale(2.5);
			transform: scale(2.5)
		}
	}

	.r-button-wave {
		position: absolute;
		background-color: rgba(0,0,0,.15);
		border-radius: 50%;
		transform: scale(0);
		pointer-events: none;

		&.pressed {
			animation: r-button-ripple 1.1s linear forwards;
		}

		&.r-button-wave-hidden {
			opacity: 0;
		}
	}

	.r-button-text {
		position: relative;
		left: 50%;
		transform: translate3d(-50%,0,0);
		z-index: 1;
	}

	.r-button {
		position: relative;
		-webkit-appearance: none;
		border: none;
		padding: .7em 1.5em;
		font-size: 1rem;
		border-radius: .28rem;
		outline: none;
		cursor: pointer;
		box-sizing: border-box;
		border: solid 1px transparent;
		vertical-align: middle;
		overflow: hidden;

		&.r-button-sm {
			padding: .5em .9em;
		}

		&:not(.r-button-disabled):active {
			box-shadow: inset 0 1px 5px rgba(0,0,0,.15);
		}
	}

	.r-button-disabled {
		cursor: not-allowed;

		&.r-button-basic {
			color: #999;
		}

		&.r-button-primary {
			background-color: tint(@primary-color, 45%);
		}
	}

	.r-button-basic {
		background-color: #FFF;
		border: solid 1px #DDD;
		color: #333;

		&:not(.r-button-disabled):hover, &:not(.r-button-disabled):focus {
			background-color: shade(#FFF, 3%);
		}
	}

	.r-button-primary {
		background-color: @button-color;
		color: #fff;

		&:not(.r-button-disabled):hover, &:not(.r-button-disabled):focus {
			background-color: shade(@button-color, 5%);
		}
	}
</style>
